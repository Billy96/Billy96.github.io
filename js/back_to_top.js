(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

$(document).ready(function () {
  var $button = $('#back-to-top');
  var $footer = $('footer.footer');
  var $mainColumn = $('.column-main');
  var $leftSidebar = $('.column-left');
  var $rightSidebar = $('.column-right');
  var lastScrollTop = 0;
  var rightMargin = 20;
  var bottomMargin = 20;
  var lastState = null;
  var state = {
    base: {
      classname: 'card has-text-centered',
      left: '',
      width: 64,
      bottom: bottomMargin
    }
  };
  state['desktop-hidden'] = Object.assign({}, state.base, {
    classname: state.base.classname + ' rise-up'
  });
  state['desktop-visible'] = Object.assign({}, state['desktop-hidden'], {
    classname: state['desktop-hidden'].classname + ' fade-in'
  });
  state['desktop-dock'] = Object.assign({}, state['desktop-visible'], {
    classname: state['desktop-visible'].classname + ' fade-in is-rounded',
    width: 40
  });
  state['mobile-hidden'] = Object.assign({}, state.base, {
    classname: state.base.classname + ' fade-in',
    right: rightMargin
  });
  state['mobile-visible'] = Object.assign({}, state['mobile-hidden'], {
    classname: state['mobile-hidden'].classname + ' rise-up'
  });

  function isStateEquals(prev, next) {
    return ![].concat(Object.keys(prev), Object.keys(next)).some(function (key) {
      return !Object.prototype.hasOwnProperty.call(prev, key) || !Object.prototype.hasOwnProperty.call(next, key) || next[key] !== prev[key];
    });
  }

  function applyState(state) {
    if (lastState !== null && isStateEquals(lastState, state)) {
      return;
    }

    $button.attr('class', state.classname);

    for (var prop in state) {
      if (prop === 'classname') {
        continue;
      }

      $button.css(prop, state[prop]);
    }

    lastState = state;
  }

  function isDesktop() {
    return window.innerWidth >= 1078;
  }

  function isTablet() {
    return window.innerWidth >= 768 && !isDesktop();
  }

  function isScrollUp() {
    return $(window).scrollTop() < lastScrollTop && $(window).scrollTop() > 0;
  }

  function hasLeftSidebar() {
    return $leftSidebar.length > 0;
  }

  function hasRightSidebar() {
    return $rightSidebar.length > 0;
  }

  function getRightSidebarBottom() {
    if (!hasRightSidebar()) {
      return 0;
    }

    return Math.max.apply(null, $rightSidebar.find('.widget').map(function () {
      return $(this).offset().top + $(this).outerHeight(true);
    }));
  }

  function getScrollTop() {
    return $(window).scrollTop();
  }

  function getScrollBottom() {
    return $(window).scrollTop() + $(window).height();
  }

  function getButtonWidth() {
    return $button.outerWidth(true);
  }

  function getButtonHeight() {
    return $button.outerHeight(true);
  }

  function updateScrollTop() {
    lastScrollTop = $(window).scrollTop();
  }

  function update() {
    // desktop mode or tablet mode with only right sidebar enabled
    if (isDesktop() || isTablet() && !hasLeftSidebar() && hasRightSidebar()) {
      var nextState;
      var padding = ($mainColumn.outerWidth() - $mainColumn.width()) / 2;
      var maxLeft = $(window).width() - getButtonWidth() - rightMargin;
      var maxBottom = $footer.offset().top + getButtonHeight() / 2 + bottomMargin;

      if (getScrollTop() === 0 || getScrollBottom() < getRightSidebarBottom() + padding + getButtonHeight()) {
        nextState = state['desktop-hidden'];
      } else if (getScrollBottom() < maxBottom) {
        nextState = state['desktop-visible'];
      } else {
        nextState = Object.assign({}, state['desktop-dock'], {
          bottom: getScrollBottom() - maxBottom + bottomMargin
        });
      }

      var left = $mainColumn.offset().left + $mainColumn.outerWidth() + padding;
      nextState = Object.assign({}, nextState, {
        left: Math.min(left, maxLeft)
      });
      applyState(nextState);
    } else {
      // mobile and tablet mode
      if (!isScrollUp()) {
        applyState(state['mobile-hidden']);
      } else {
        applyState(state['mobile-visible']);
      }

      updateScrollTop();
    }
  }

  update();
  $(window).resize(update);
  $(window).scroll(update);
  $('#back-to-top').on('click', function () {
    if (CSS && CSS.supports && CSS.supports('(scroll-behavior: smooth)')) {
      window.scroll({
        top: 0,
        behavior: 'smooth'
      });
    } else {
      $('body, html').animate({
        scrollTop: 0
      }, 400);
    }
  });
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvaGV4by10aGVtZS1pY2FydXMvc291cmNlL2pzL2JhY2tfdG9fdG9wLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQSxDQUFDLENBQUMsUUFBRCxDQUFELENBQVksS0FBWixDQUFrQixZQUFNO0FBQ3BCLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxjQUFELENBQWpCO0FBQ0EsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLGVBQUQsQ0FBakI7QUFDQSxNQUFNLFdBQVcsR0FBRyxDQUFDLENBQUMsY0FBRCxDQUFyQjtBQUNBLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQyxjQUFELENBQXRCO0FBQ0EsTUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFDLGVBQUQsQ0FBdkI7QUFDQSxNQUFJLGFBQWEsR0FBRyxDQUFwQjtBQUNBLE1BQU0sV0FBVyxHQUFHLEVBQXBCO0FBQ0EsTUFBTSxZQUFZLEdBQUcsRUFBckI7QUFDQSxNQUFJLFNBQVMsR0FBRyxJQUFoQjtBQUNBLE1BQU0sS0FBSyxHQUFHO0FBQ1YsSUFBQSxJQUFJLEVBQUU7QUFDRixNQUFBLFNBQVMsRUFBRSx3QkFEVDtBQUVGLE1BQUEsSUFBSSxFQUFFLEVBRko7QUFHRixNQUFBLEtBQUssRUFBRSxFQUhMO0FBSUYsTUFBQSxNQUFNLEVBQUU7QUFKTjtBQURJLEdBQWQ7QUFRQSxFQUFBLEtBQUssQ0FBQyxnQkFBRCxDQUFMLEdBQTBCLE1BQU0sQ0FBQyxNQUFQLENBQWMsRUFBZCxFQUFrQixLQUFLLENBQUMsSUFBeEIsRUFBOEI7QUFDcEQsSUFBQSxTQUFTLEVBQUUsS0FBSyxDQUFDLElBQU4sQ0FBVyxTQUFYLEdBQXVCO0FBRGtCLEdBQTlCLENBQTFCO0FBR0EsRUFBQSxLQUFLLENBQUMsaUJBQUQsQ0FBTCxHQUEyQixNQUFNLENBQUMsTUFBUCxDQUFjLEVBQWQsRUFBa0IsS0FBSyxDQUFDLGdC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QyxlQUFELENBQU4sQ0FBVjtBQUNILE9BRkQsTUFFTztBQUNILFFBQUEsVUFBVSxDQUFDLEtBQUssQ0FBQyxnQkFBRCxDQUFOLENBQVY7QUFDSDs7QUFDRCxNQUFBLGVBQWU7QUFDbEI7QUFDSjs7QUFFRCxFQUFBLE1BQU07QUFDTixFQUFBLENBQUMsQ0FBQyxNQUFELENBQUQsQ0FBVSxNQUFWLENBQWlCLE1BQWpCO0FBQ0EsRUFBQSxDQUFDLENBQUMsTUFBRCxDQUFELENBQVUsTUFBVixDQUFpQixNQUFqQjtBQUVBLEVBQUEsQ0FBQyxDQUFDLGNBQUQsQ0FBRCxDQUFrQixFQUFsQixDQUFxQixPQUFyQixFQUE4QixZQUFNO0FBQ2hDLFFBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFYLElBQXVCLEdBQUcsQ0FBQyxRQUFKLENBQWEsMkJBQWIsQ0FBM0IsRUFBc0U7QUFDbEUsTUFBQSxNQUFNLENBQUMsTUFBUCxDQUFjO0FBQUUsUUFBQSxHQUFHLEVBQUUsQ0FBUDtBQUFVLFFBQUEsUUFBUSxFQUFFO0FBQXBCLE9BQWQ7QUFDSCxLQUZELE1BRU87QUFDSCxNQUFBLENBQUMsQ0FBQyxZQUFELENBQUQsQ0FBZ0IsT0FBaEIsQ0FBd0I7QUFBRSxRQUFBLFNBQVMsRUFBRTtBQUFiLE9BQXhCLEVBQTBDLEdBQTFDO0FBQ0g7QUFDSixHQU5EO0FBT0gsQ0F2SkQiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIkKGRvY3VtZW50KS5yZWFkeSgoKSA9PiB7XG4gICAgY29uc3QgJGJ1dHRvbiA9ICQoJyNiYWNrLXRvLXRvcCcpO1xuICAgIGNvbnN0ICRmb290ZXIgPSAkKCdmb290ZXIuZm9vdGVyJyk7XG4gICAgY29uc3QgJG1haW5Db2x1bW4gPSAkKCcuY29sdW1uLW1haW4nKTtcbiAgICBjb25zdCAkbGVmdFNpZGViYXIgPSAkKCcuY29sdW1uLWxlZnQnKTtcbiAgICBjb25zdCAkcmlnaHRTaWRlYmFyID0gJCgnLmNvbHVtbi1yaWdodCcpO1xuICAgIGxldCBsYXN0U2Nyb2xsVG9wID0gMDtcbiAgICBjb25zdCByaWdodE1hcmdpbiA9IDIwO1xuICAgIGNvbnN0IGJvdHRvbU1hcmdpbiA9IDIwO1xuICAgIGxldCBsYXN0U3RhdGUgPSBudWxsO1xuICAgIGNvbnN0IHN0YXRlID0ge1xuICAgICAgICBiYXNlOiB7XG4gICAgICAgICAgICBjbGFzc25hbWU6ICdjYXJkIGhhcy10ZXh0LWNlbnRlcmVkJyxcbiAgICAgICAgICAgIGxlZnQ6ICcnLFxuICAgICAgICAgICAgd2lkdGg6IDY0LFxuICAgICAgICAgICAgYm90dG9tOiBib3R0b21NYXJnaW5cbiAgICAgICAgfVxuICAgIH07XG4gICAgc3RhdGVbJ2Rlc2t0b3AtaGlkZGVuJ10gPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5iYXNlLCB7XG4gICAgICAgIGNsYXNzbmFtZTogc3RhdGUuYmFzZS5jbGFzc25hbWUgKyAnIHJpc2UtdXAnXG4gICAgfSk7XG4gICAgc3RhdGVbJ2Rlc2t0b3AtdmlzaWJsZSddID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGVbJ2Rlc2t0b3AtaGlkZGVuJ10sIHtcbiAgICAgICAgY2xhc3NuYW1lOiBzdGF0ZVsnZGVza3RvcC1oaWRkZW4nXS5jbGFzc25hbWUgKyAnIGZhZGUtaW4nXG4gICAgfSk7XG4gICAgc3RhdGVbJ2Rlc2t0b3AtZG9jayddID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGVbJ2Rlc2t0b3AtdmlzaWJsZSddLCB7XG4gICAgICAgIGNsYXNzbmFtZTogc3RhdGVbJ2Rlc2t0b3AtdmlzaWJsZSddLmNsYXNzbmFtZSArICcgZmFkZS1pbiBpcy1yb3VuZGVkJyxcbiAgICAgICAgd2lkdGg6IDQwXG4gICAgfSk7XG4gICAgc3RhdGVbJ21vYmlsZS1oaWRkZW4nXSA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLmJhc2UsIHtcbiAgICAgICAgY2xhc3NuYW1lOiBzdGF0ZS5iYXNlLmNsYXNzbmFtZSArICcgZmFkZS1pbicsXG4gICAgICAgIHJpZ2h0OiByaWdodE1hcmdpblxuICAgIH0pO1xuICAgIHN0YXRlWydtb2JpbGUtdmlzaWJsZSddID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGVbJ21vYmlsZS1oaWRkZW4nXSwge1xuICAgICAgICBjbGFzc25hbWU6IHN0YXRlWydtb2JpbGUtaGlkZGVuJ10uY2xhc3NuYW1lICsgJyByaXNlLXVwJ1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gaXNTdGF0ZUVxdWFscyhwcmV2LCBuZXh0KSB7XG4gICAgICAgIHJldHVybiAhW10uY29uY2F0KE9iamVjdC5rZXlzKHByZXYpLCBPYmplY3Qua2V5cyhuZXh0KSkuc29tZShrZXkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJldiwga2V5KVxuICAgICAgICAgICAgICAgIHx8ICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobmV4dCwga2V5KVxuICAgICAgICAgICAgICAgIHx8IG5leHRba2V5XSAhPT0gcHJldltrZXldO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseVN0YXRlKHN0YXRlKSB7XG4gICAgICAgIGlmIChsYXN0U3RhdGUgIT09IG51bGwgJiYgaXNTdGF0ZUVxdWFscyhsYXN0U3RhdGUsIHN0YXRlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgICRidXR0b24uYXR0cignY2xhc3MnLCBzdGF0ZS5jbGFzc25hbWUpO1xuICAgICAgICBmb3IgKGNvbnN0IHByb3AgaW4gc3RhdGUpIHtcbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnY2xhc3NuYW1lJykge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJGJ1dHRvbi5jc3MocHJvcCwgc3RhdGVbcHJvcF0pO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RTdGF0ZSA9IHN0YXRlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGVza3RvcCgpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5pbm5lcldpZHRoID49IDEwNzg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNUYWJsZXQoKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aCA+PSA3NjggJiYgIWlzRGVza3RvcCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2Nyb2xsVXAoKSB7XG4gICAgICAgIHJldHVybiAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgPCBsYXN0U2Nyb2xsVG9wICYmICQod2luZG93KS5zY3JvbGxUb3AoKSA+IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzTGVmdFNpZGViYXIoKSB7XG4gICAgICAgIHJldHVybiAkbGVmdFNpZGViYXIubGVuZ3RoID4gMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNSaWdodFNpZGViYXIoKSB7XG4gICAgICAgIHJldHVybiAkcmlnaHRTaWRlYmFyLmxlbmd0aCA+IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UmlnaHRTaWRlYmFyQm90dG9tKCkge1xuICAgICAgICBpZiAoIWhhc1JpZ2h0U2lkZWJhcigpKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgJHJpZ2h0U2lkZWJhci5maW5kKCcud2lkZ2V0JykubWFwKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICQodGhpcykub2Zmc2V0KCkudG9wICsgJCh0aGlzKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNjcm9sbFRvcCgpIHtcbiAgICAgICAgcmV0dXJuICQod2luZG93KS5zY3JvbGxUb3AoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTY3JvbGxCb3R0b20oKSB7XG4gICAgICAgIHJldHVybiAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyAkKHdpbmRvdykuaGVpZ2h0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QnV0dG9uV2lkdGgoKSB7XG4gICAgICAgIHJldHVybiAkYnV0dG9uLm91dGVyV2lkdGgodHJ1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QnV0dG9uSGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gJGJ1dHRvbi5vdXRlckhlaWdodCh0cnVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVTY3JvbGxUb3AoKSB7XG4gICAgICAgIGxhc3RTY3JvbGxUb3AgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgICAvLyBkZXNrdG9wIG1vZGUgb3IgdGFibGV0IG1vZGUgd2l0aCBvbmx5IHJpZ2h0IHNpZGViYXIgZW5hYmxlZFxuICAgICAgICBpZiAoaXNEZXNrdG9wKCkgfHwgKGlzVGFibGV0KCkgJiYgIWhhc0xlZnRTaWRlYmFyKCkgJiYgaGFzUmlnaHRTaWRlYmFyKCkpKSB7XG4gICAgICAgICAgICBsZXQgbmV4dFN0YXRlO1xuICAgICAgICAgICAgY29uc3QgcGFkZGluZyA9ICgkbWFpbkNvbHVtbi5vdXRlcldpZHRoKCkgLSAkbWFpbkNvbHVtbi53aWR0aCgpKSAvIDI7XG4gICAgICAgICAgICBjb25zdCBtYXhMZWZ0ID0gJCh3aW5kb3cpLndpZHRoKCkgLSBnZXRCdXR0b25XaWR0aCgpIC0gcmlnaHRNYXJnaW47XG4gICAgICAgICAgICBjb25zdCBtYXhCb3R0b20gPSAkZm9vdGVyLm9mZnNldCgpLnRvcCArIChnZXRCdXR0b25IZWlnaHQoKSAvIDIpICsgYm90dG9tTWFyZ2luO1xuICAgICAgICAgICAgaWYgKGdldFNjcm9sbFRvcCgpID09PSAwIHx8IGdldFNjcm9sbEJvdHRvbSgpIDwgZ2V0UmlnaHRTaWRlYmFyQm90dG9tKCkgKyBwYWRkaW5nICsgZ2V0QnV0dG9uSGVpZ2h0KCkpIHtcbiAgICAgICAgICAgICAgICBuZXh0U3RhdGUgPSBzdGF0ZVsnZGVza3RvcC1oaWRkZW4nXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZ2V0U2Nyb2xsQm90dG9tKCkgPCBtYXhCb3R0b20pIHtcbiAgICAgICAgICAgICAgICBuZXh0U3RhdGUgPSBzdGF0ZVsnZGVza3RvcC12aXNpYmxlJ107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5leHRTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlWydkZXNrdG9wLWRvY2snXSwge1xuICAgICAgICAgICAgICAgICAgICBib3R0b206IGdldFNjcm9sbEJvdHRvbSgpIC0gbWF4Qm90dG9tICsgYm90dG9tTWFyZ2luXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGxlZnQgPSAkbWFpbkNvbHVtbi5vZmZzZXQoKS5sZWZ0ICsgJG1haW5Db2x1bW4ub3V0ZXJXaWR0aCgpICsgcGFkZGluZztcbiAgICAgICAgICAgIG5leHRTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIG5leHRTdGF0ZSwge1xuICAgICAgICAgICAgICAgIGxlZnQ6IE1hdGgubWluKGxlZnQsIG1heExlZnQpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFwcGx5U3RhdGUobmV4dFN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG1vYmlsZSBhbmQgdGFibGV0IG1vZGVcbiAgICAgICAgICAgIGlmICghaXNTY3JvbGxVcCgpKSB7XG4gICAgICAgICAgICAgICAgYXBwbHlTdGF0ZShzdGF0ZVsnbW9iaWxlLWhpZGRlbiddKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXBwbHlTdGF0ZShzdGF0ZVsnbW9iaWxlLXZpc2libGUnXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cGRhdGVTY3JvbGxUb3AoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZSgpO1xuICAgICQod2luZG93KS5yZXNpemUodXBkYXRlKTtcbiAgICAkKHdpbmRvdykuc2Nyb2xsKHVwZGF0ZSk7XG5cbiAgICAkKCcjYmFjay10by10b3AnKS5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGlmIChDU1MgJiYgQ1NTLnN1cHBvcnRzICYmIENTUy5zdXBwb3J0cygnKHNjcm9sbC1iZWhhdmlvcjogc21vb3RoKScpKSB7XG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsKHsgdG9wOiAwLCBiZWhhdmlvcjogJ3Ntb290aCcgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkKCdib2R5LCBodG1sJykuYW5pbWF0ZSh7IHNjcm9sbFRvcDogMCB9LCA0MDApO1xuICAgICAgICB9XG4gICAgfSk7XG59KTtcbiJdfQ==
